---
# This Deployment frequently fetches registry tokens and applies them as an imagePullSecret.
# It's done as a 1-replica Deployment rather than a CronJob, because CronJob scheduling can
# block cluster bootstraps and cold-reboots from obtaining registry tokens for a considerable time.
# This deployment will immediately fetch a token, which reduces latency for working image updates.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ephemeral-environment-controller
  namespace: flux-system
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      serviceAccount: ephemeral-environment-controller
      containers:
      - image: busybox  # override this with a cloud-specific image
        name: controller
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: ephemeral-environment-controller
        env:
        - name: RECONCILE_SH  # override this env var with a shell function in a kustomize patch
          value: |-
            reconcile() {
              echo reconciling...
              clone_repo
              get_branches_from_origin
              get_branches_in_cluster
              get_branches_to_delete
              create_ephemeral_environments
              reap_ephemeral_environments
            }
        command:
        - bash
        - -ceu
        - |-
          # constants
          REPO_DIR=repo

          # template reconcile() into the script
          # env var is expanded by k8s before the pod starts
          $(RECONCILE_SH)

          get_branches_from_origin() {
            git branch -a --list 'origin/*feature*' | parse_branches | sort -u > /tmp/branches
          }

          get_branches_in_cluster() {
            kubectl get gitrepository -oname | grep feature | cut -d/ -f2 | sort -u > /tmp/in_cluster
          }

          get_branches_to_delete() {
            comm -2 <(cat /tmp/branches | sanitize_branches) /tmp/in_cluster > /tmp/to_delete
          }

          clone_repo() {
              cd /app/clonedir
              git clone ${GIT_REPO} --branch ${GIT_BRANCH} --single-branch ${REPO_DIR}
              cd ${REPO_DIR}
          }

          pause_loop() {
            sleep "${SYNC_PERIOD:-3600}" || true
          }

          parse_branches() {
            tr '/' ' ' | awk '{print $3}'
          }

          sanitize_branches() {
          # "--branch_TEST-@@@.^-name--" --> "branch-test-name"
            tr '[:upper:]' '[:lower:]' \
            | tr -c '[:alnum:]' - \
            | tr -s - \
            | sed -e 's/^-*//' -e 's/-*$//' -e 's/--*/-/'
          }

          create_ephemeral_environments() {
            for raw_br in $(cat /tmp/branches); do
              kube_br="$(echo "${raw_br}" | sanitize_branches)"
              echo "creating ephemeral environment $kube_br"
              kubectl apply -f- --dry-run=server << EOF
          ---
          apiVersion: source.toolkit.fluxcd.io/v1beta1
          kind: GitRepository
          metadata:
            name: ${kube_br}
            namespace: flux-system
          spec:
            interval: 1m0s
            ref:
              branch: ${raw_br}
            url: ssh://${GIT_REPO}
            secretRef: flux-system
          ---
          apiVersion: kustomize.toolkit.fluxcd.io/v1beta1
          kind: Kustomization
          metadata:
            name: ${kube_br}
            namespace: flux-system
          spec:
            interval: 1m0s
            path: ./
            prune: true
            sourceRef:
              kind: GitRepository
              name: ${kube_br}
            targetNamespace: ${kube_br}
          EOF
            done
          }


          reap_ephemeral_environments() {
            for kube_br in $(cat /tmp/to_delete); do
              kubectl delete --wait=false gitrepository "${kube_br}" --dry-run=server
              kubectl delete --wait=false kustomization "${kube_br}" --dry-run=server
              kubectl delete --wait=false namespace "${kube_br}" --dry-run=server
            done
          }

          graceful_exit() {
            echo "Trapped signal -- $(date)"
            job_ids="$(
              jobs \
                | grep "pause_loop" \
                | cut -d] -f1 \
                | tr [ %
              )"
            # shellcheck disable=SC2086
            if [ "${job_ids}" ]; then
              kill ${job_ids}
            fi
            wait
            echo "Graceful exit -- $(date)"
          }

          trap graceful_exit INT TERM

          echo "Loop started (period: ${SYNC_PERIOD} s) -- $(date)"
          while true; do
            reconcile & wait $!
            pause_loop & wait $!
          done
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
          - mountPath: /app/ssh_keys
            name: keys
          - mountPath: /app/clonedir
            name: clonedir
          - mountPath: /tmp
            name: tmpfs
      volumes:
        - name: keys
          secret:
            secretName: $(KUBE_SECRET)
            defaultMode: 0400
        - name: clonedir
          emptyDir: {}
        - name: tmpfs
          emptyDir:
            medium: Memory



# RBAC necessary for our Deployment to apply our imagePullSecret
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ephemeral-environment-controller
  namespace: flux-system
rules:
- apiGroups: [""]
  resources:
  - secrets
  verbs:
  - get
  - create
  - update
  - patch
  resourceNames:
  - $(KUBE_SECRET)  # templated from kustomize vars referencing ConfigMap, also see kustomizeconfig.yaml
- apiGroups: ["kustomize.toolkit.fluxcd.io"]
  resources:
    - kustomizations
  verbs:
    - get
    - create
    - update
    - patch
    - delete
    - list
- apiGroups: ["source.toolkit.fluxcd.io"]
  resources:
    - gitrepositories
  verbs:
    - get
    - create
    - update
    - patch
    - delete
    - list
  # # Lock this down to the specific Secret name  (Optional)
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ephemeral-environment-controller
  namespace: flux-system
subjects:
- kind: ServiceAccount
  name: ephemeral-environment-controller
roleRef:
  kind: Role
  name: ephemeral-environment-controller
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ephemeral-environment-controller
  namespace: flux-system